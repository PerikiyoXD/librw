//////////////////////////////////////////////////////////////////////////////
// This file is part of the Maple Engine                              		//
//////////////////////////////////////////////////////////////////////////////
#version 460

#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : enable


layout(set = 2, binding = 3, scalar) buffer ProbeState
{
    int8_t probeStates[];
};

#define DDGI_CLASSIFY
#include "DDGICommon.glsl"
#include "../Common/Math.glsl"

#define NUM_THREADS_X 32
#define NUM_THREADS_Y 32

layout(local_size_x = NUM_THREADS_X, local_size_y = NUM_THREADS_Y, local_size_z = 1) in;


layout(set = 0, binding = 0, rgba16f) uniform image2D outColor;

layout(set = 1, binding = 0) uniform sampler2D uDepthSampler;
layout(set = 1, binding = 1) uniform sampler2D uNormalSampler;
layout(set = 1, binding = 2) uniform sampler2D uColorSampler;

layout(set = 2, binding = 0) uniform sampler2D uIrradiance;
layout(set = 2, binding = 1) uniform sampler2D uDepth;
layout(set = 2, binding = 2, scalar) uniform DDGIUBO
{
    DDGIUniform ddgi;
};


layout(push_constant) uniform PushConstants
{
    vec4  cameraPosition;
    mat4 viewProjInv;
    float intensity;
}pushConsts;

void main()
{
    const ivec2 size          = textureSize(uDepthSampler,0);
    const vec2  texelSize    = vec2(1.0f) / vec2(size);
    const ivec2 currentCoord = ivec2(gl_GlobalInvocationID.xy);
    const vec2  pixelCenter  = vec2(currentCoord) + vec2(0.5);
    const vec2  texCoord     = pixelCenter / vec2(size);

    float depth = texelFetch(uDepthSampler, currentCoord, 0).r;

    if (depth == 1.0f)
    {
        imageStore(outColor, currentCoord, vec4(0.0f));
        return;
    }

    const vec3 P  = worldPositionFromDepth(texCoord, texelFetch(uDepthSampler,currentCoord,0).r, pushConsts.viewProjInv);
    const vec3 N  = octohedralToDirection(texelFetch(uNormalSampler, currentCoord, 0).xy);
    const vec3 Wo = normalize(pushConsts.cameraPosition.xyz - P);

    vec3 irradiance = sampleIrradiance(ddgi, P, N, Wo, uIrradiance, uDepth);

    vec4 color = texelFetch(uColorSampler, currentCoord, 0);

    imageStore(outColor, currentCoord, vec4(pushConsts.intensity * irradiance * color.xyz / PI, 1.0f));
}