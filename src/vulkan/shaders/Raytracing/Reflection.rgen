//////////////////////////////////////////////////////////////////////////////
// This file is part of the Maple Engine                              		//
//////////////////////////////////////////////////////////////////////////////
#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_scalar_block_layout : enable

#include "Common.glsl"
#include "../Common/Math.glsl"
#include "../Common/Common.glsl"
#include "../Common/BlueNoise.glsl"

layout(location = 0) rayPayloadEXT ReflectionPayload outPayload;

layout (set = 0, binding = 0, std430) buffer ObjectBuffer 
{
	Object objects[];
};

layout(set = 0, binding = 1) uniform accelerationStructureEXT uTopLevelAS;

layout(set = 4, binding = 0) uniform sampler2D uDepthSampler;
layout(set = 4, binding = 1) uniform sampler2D uNormalSampler;
layout(set = 4, binding = 2) uniform sampler2D uObjID;
layout(set = 4, binding = 3) uniform sampler2D uColorSampler;

layout(set = 5, binding = 0, rgba16f) uniform image2D outColor;

layout(set = 6, binding = 0) uniform sampler2D uSobolSequence;
layout(set = 6, binding = 1) uniform sampler2D uScramblingRankingTile;

#include "../DDGI/DDGICommon.glsl"

layout (set = 7, binding = 0) uniform sampler2D uIrradiance;
layout (set = 7, binding = 1) uniform sampler2D uDepth;
layout (set = 7, binding = 2, scalar) uniform DDGIUBO
{
    DDGIUniform ddgi;
};

layout(push_constant) uniform PushConstants
{
    vec4  cameraPosition;
    mat4  viewProjInv;
    vec4  ambientColor;
    float bias;
    float trim;
    int numFrames;
    int mipmap;
}pushConsts;

vec2 nextSample(ivec2 coord)
{
    return vec2(sampleBlueNoise(coord, int(pushConsts.numFrames), 0, uSobolSequence, uScramblingRankingTile),
                sampleBlueNoise(coord, int(pushConsts.numFrames), 1, uSobolSequence, uScramblingRankingTile));
}

#include "../PathTrace/BRDF.glsl"

#define surfDiffuse (objects[objectId].u_surfProps.z)
#define surfSpecular (objects[objectId].u_surfProps.y)

void main()
{
    const ivec2 size = textureSize(uNormalSampler, pushConsts.mipmap);
    const uvec2 launchId = uvec2(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y);
    
    ivec2 currentCoord = ivec2(gl_LaunchIDEXT.xy);
    const vec2  pixelCenter  = vec2(currentCoord) + vec2(0.5);
    vec2  texCoord     = pixelCenter / vec2(size);


    float depth = texelFetch(uDepthSampler, currentCoord, pushConsts.mipmap).r;
    if (depth == 1.0f)
    {
        imageStore(outColor, currentCoord, vec4(0.0f, 0.0f, 0.0f, -1.0f));
        return;
    }

    vec4 normal = texelFetch(uNormalSampler, currentCoord, pushConsts.mipmap);
    int objectId  = int(texelFetch(uObjID, currentCoord, pushConsts.mipmap).r);
    float specular = surfSpecular;

    vec3  N         = octohedralToDirection(normal.xy);

    vec3  P         = worldPositionFromDepth(texCoord, depth, pushConsts.viewProjInv);
    vec3  Wo        = normalize(pushConsts.cameraPosition.xyz - P.xyz);

    uint  rayFlags   = gl_RayFlagsOpaqueEXT;
    uint  cullMask   = 0xff;
    float tmin       = 0;
    float tmax       = 100000.0;
    vec3  rayOrigin  = P + N * pushConsts.bias;

    outPayload.random = randomInit(launchId, pushConsts.numFrames);
    outPayload.rayLength = -1.0f;
    outPayload.color = vec3(0,0,0);
    outPayload.T = vec3(1);
    if (specular >= DDGI_MIRROR_ROUGHNESS_THRESHOLD)// mirror
    {
        vec3 R = reflect(-Wo, N.xyz);
        traceRayEXT(uTopLevelAS, rayFlags, cullMask, 0, 0, 0, rayOrigin, tmin, R, tmax, 0);
    }
    else if(specular >= DDGI_REFLECTIONS_ROUGHNESS_THRESHOLD)
    {
        vec4 diffuse = texture(uColorSampler, texCoord);
       
        SurfaceMaterial p;
        p.roughness = 1 - specular;
        p.diffuse = diffuse;
        p.vertex.position = P;
        p.vertex.normal = N;
        p.diffuseTerm = surfDiffuse;
        p.F0 = mix(vec3(0.03), p.diffuse.xyz, surfDiffuse);
        
        vec3 Wi;
        float pdf;
        vec3 brdf = sampleBRDF(p, Wo, outPayload.random, Wi, pdf);
        float cosTheta = clamp(dot(N, Wi), 0.0, 1.0);
        outPayload.T = (brdf * cosTheta) / pdf;

        traceRayEXT(uTopLevelAS, rayFlags, cullMask, 0, 0, 0, rayOrigin, tmin, Wi, tmax, 0);

        /*vec2 Xi = nextSample(currentCoord) * pushConsts.trim;

        vec4 WhPDF = importanceSampleGGX(Xi, N, 1 - specular);

        float pdf = WhPDF.w;
        vec3  Wi  = reflect(-Wo, WhPDF.xyz);
        traceRayEXT(uTopLevelAS, rayFlags, cullMask, 0, 0, 0, rayOrigin, tmin, Wi, tmax, 0);*/
    }
  

    vec3 clampedColor = min(outPayload.color, vec3(1.f));
    imageStore(outColor, currentCoord, vec4(clampedColor, outPayload.rayLength));
}