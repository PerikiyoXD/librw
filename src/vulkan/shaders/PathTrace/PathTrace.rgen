//////////////////////////////////////////////////////////////////////////////
// This file is part of the Maple Engine                              		//
//////////////////////////////////////////////////////////////////////////////
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#include "../Common/Common.glsl"
#include "../Raytracing/Common.glsl"

layout(location = 0) rayPayloadEXT PathTracePayload outPayload; //out

layout (set = 0, binding = 1) uniform accelerationStructureEXT uTopLevelAS;

layout (set = 4, binding = 0, rgba16f) writeonly uniform image2D uCurrentColor;
layout (set = 4, binding = 1, rgba16f) readonly uniform image2D uPreviousColor;

layout(push_constant) uniform PushConsts
{
    mat4 invViewProj;
    vec4 cameraPos;
    vec4 ambientColor;
    uint numFrames;
    uint maxBounces;
    float accumulation;
    float shadowRayBias;
} pushConsts;
struct Ray
{
    vec3 origin;
    vec3 direction;
};

Ray generateRay(in uvec2 launchId, in uvec2 launchSize)
{
    Ray ray;
    const vec2 pixelCoord = vec2(launchId) + vec2(0.5);
    const vec2 jitteredCoord = pixelCoord + vec2(nextFloat(outPayload.random), nextFloat(outPayload.random)); 
    vec2 texCoord = jitteredCoord / vec2(launchSize);
    texCoord = texCoord * 2.0 - 1.0;
    // Compute Ray Origin and Direction
    ray.origin = pushConsts.cameraPos.xyz;
    vec4 target =  pushConsts.invViewProj * vec4(texCoord, 0.0f, 1.0f);
    target /= target.w;
    ray.direction = normalize(target.xyz - ray.origin);
    return ray;
}

void main()
{
    const uvec2 launchId = uvec2(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y);
    const uvec2 size = gl_LaunchSizeEXT.xy;

    // Init Payload
    outPayload.L = vec3(0.0f);
    outPayload.T = vec3(1.0);
    outPayload.depth = 0;
    outPayload.random = randomInit(launchId, pushConsts.numFrames);

    Ray ray = generateRay(launchId, size);

    uint  rayFlags = 0;
    uint  cullMask = 0xFF;
    float tmin      = 0.001;
    float tmax      = 10000.0;

    // Trace Ray
    traceRayEXT(uTopLevelAS,                        // acceleration structure
                rayFlags,                           // rayFlags
                cullMask,                           // cullMask
                PATH_TRACE_CLOSEST_HIT_SHADER_IDX,  // sbtRecordOffset
                0,                                  // sbtRecordStride
                PATH_TRACE_MISS_SHADER_IDX,         // missIndex
                ray.origin,                         // ray origin
                tmin,                               // ray origin
                ray.direction,                      // ray direction
                tmax,                               // ray max range
                0                                   // payload (location = 0)
                ); 

    // Blend current frames' result with the previous frame
    vec3 clampedColor = min(outPayload.L, RADIANCE_CLAMP_COLOR);

    if (pushConsts.numFrames == 0)
    {
        vec3 finalColor = clampedColor;
        imageStore(uCurrentColor, ivec2(launchId), vec4(finalColor, 1.0));
    }
    else
    {
       vec3 prevColor = imageLoad(uPreviousColor, ivec2(launchId)).rgb;
       vec3 accumulatedColor = prevColor + (clampedColor - prevColor) / float(pushConsts.numFrames);
       imageStore(uCurrentColor, ivec2(launchId), vec4(accumulatedColor, 1.0));
    }
}
